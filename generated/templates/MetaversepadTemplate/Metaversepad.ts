// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class FundPool extends ethereum.Event {
  get params(): FundPool__Params {
    return new FundPool__Params(this);
  }
}

export class FundPool__Params {
  _event: FundPool;

  constructor(event: FundPool) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get initiator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Metaversepad__tierInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class Metaversepad__userInfoResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Metaversepad extends ethereum.SmartContract {
  static bind(address: Address): Metaversepad {
    return new Metaversepad("Metaversepad", address);
  }

  ERC20Interface(): Address {
    let result = super.call("ERC20Interface", "ERC20Interface():(address)", []);

    return result[0].toAddress();
  }

  try_ERC20Interface(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ERC20Interface",
      "ERC20Interface():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  buyTokens(amount: BigInt): boolean {
    let result = super.call("buyTokens", "buyTokens(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_buyTokens(amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("buyTokens", "buyTokens(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  noOfTiers(): BigInt {
    let result = super.call("noOfTiers", "noOfTiers():(uint256)", []);

    return result[0].toBigInt();
  }

  try_noOfTiers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("noOfTiers", "noOfTiers():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolMaxCap(): BigInt {
    let result = super.call("poolMaxCap", "poolMaxCap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolMaxCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolMaxCap", "poolMaxCap():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  projectOwner(): Address {
    let result = super.call("projectOwner", "projectOwner():(address)", []);

    return result[0].toAddress();
  }

  try_projectOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("projectOwner", "projectOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  saleEndTime(): BigInt {
    let result = super.call("saleEndTime", "saleEndTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_saleEndTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("saleEndTime", "saleEndTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  saleStartTime(): BigInt {
    let result = super.call("saleStartTime", "saleStartTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_saleStartTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "saleStartTime",
      "saleStartTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tierInfo(param0: BigInt): Metaversepad__tierInfoResult {
    let result = super.call(
      "tierInfo",
      "tierInfo(uint256):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Metaversepad__tierInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_tierInfo(
    param0: BigInt
  ): ethereum.CallResult<Metaversepad__tierInfoResult> {
    let result = super.tryCall(
      "tierInfo",
      "tierInfo(uint256):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Metaversepad__tierInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  tokenAddress(): Address {
    let result = super.call("tokenAddress", "tokenAddress():(address)", []);

    return result[0].toAddress();
  }

  try_tokenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenAddress", "tokenAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalBUSDReceivedInAllTier(): BigInt {
    let result = super.call(
      "totalBUSDReceivedInAllTier",
      "totalBUSDReceivedInAllTier():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalBUSDReceivedInAllTier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBUSDReceivedInAllTier",
      "totalBUSDReceivedInAllTier():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalParticipants(): BigInt {
    let result = super.call(
      "totalParticipants",
      "totalParticipants():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalParticipants(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalParticipants",
      "totalParticipants():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userInfo(param0: Address): Metaversepad__userInfoResult {
    let result = super.call("userInfo", "userInfo(address):(uint256,uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return new Metaversepad__userInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_userInfo(
    param0: Address
  ): ethereum.CallResult<Metaversepad__userInfoResult> {
    let result = super.tryCall(
      "userInfo",
      "userInfo(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Metaversepad__userInfoResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get poolOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _poolMaxCap(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _saleStartTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _saleEndTime(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _noOfTiers(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _totalParticipants(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _projectOwner(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[8].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyTokensCall extends ethereum.Call {
  get inputs(): BuyTokensCall__Inputs {
    return new BuyTokensCall__Inputs(this);
  }

  get outputs(): BuyTokensCall__Outputs {
    return new BuyTokensCall__Outputs(this);
  }
}

export class BuyTokensCall__Inputs {
  _call: BuyTokensCall;

  constructor(call: BuyTokensCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyTokensCall__Outputs {
  _call: BuyTokensCall;

  constructor(call: BuyTokensCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateTierCall extends ethereum.Call {
  get inputs(): UpdateTierCall__Inputs {
    return new UpdateTierCall__Inputs(this);
  }

  get outputs(): UpdateTierCall__Outputs {
    return new UpdateTierCall__Outputs(this);
  }
}

export class UpdateTierCall__Inputs {
  _call: UpdateTierCall;

  constructor(call: UpdateTierCall) {
    this._call = call;
  }

  get _tier(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maxCap(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minAllocation(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _maxAllocation(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _totalUsers(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class UpdateTierCall__Outputs {
  _call: UpdateTierCall;

  constructor(call: UpdateTierCall) {
    this._call = call;
  }
}

export class UpdateTiersCall extends ethereum.Call {
  get inputs(): UpdateTiersCall__Inputs {
    return new UpdateTiersCall__Inputs(this);
  }

  get outputs(): UpdateTiersCall__Outputs {
    return new UpdateTiersCall__Outputs(this);
  }
}

export class UpdateTiersCall__Inputs {
  _call: UpdateTiersCall;

  constructor(call: UpdateTiersCall) {
    this._call = call;
  }

  get _tier(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _maxCap(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _minAllocation(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _maxAllocation(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _totalUsers(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class UpdateTiersCall__Outputs {
  _call: UpdateTiersCall;

  constructor(call: UpdateTiersCall) {
    this._call = call;
  }
}

export class UpdateUsersWhitelistCall extends ethereum.Call {
  get inputs(): UpdateUsersWhitelistCall__Inputs {
    return new UpdateUsersWhitelistCall__Inputs(this);
  }

  get outputs(): UpdateUsersWhitelistCall__Outputs {
    return new UpdateUsersWhitelistCall__Outputs(this);
  }
}

export class UpdateUsersWhitelistCall__Inputs {
  _call: UpdateUsersWhitelistCall;

  constructor(call: UpdateUsersWhitelistCall) {
    this._call = call;
  }

  get _users(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _tiers(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class UpdateUsersWhitelistCall__Outputs {
  _call: UpdateUsersWhitelistCall;

  constructor(call: UpdateUsersWhitelistCall) {
    this._call = call;
  }
}
